let graphql,path;_637‍.x([["createPages",()=>createPages]]);_637‍.w("gatsby",[["graphql",["graphql"],function(v){graphql=v}]]);_637‍.w("path",[["default",["path"],function(v){path=v}]]);


async function turnPizzasIntoPages({ graphql, actions }) {
  // 1. get a template for this page
  const pizzaTemplate = path.resolve('./src/templates/Pizza.js');
  // 2. Query all pizzas
  const { data } = await graphql(`
    query {
      pizzas: allSanityPizza {
        nodes {
          name
          slug {
            current
          }
        }
      }
    }
  `);
  // 3. loop over each pizza and create a page for that pizza
  data.pizzas.nodes.forEach((pizza) => {
    actions.createPage({
      // What is the url for this new page?
      path: `pizza/${pizza.slug.current}`,
      component: pizzaTemplate,
      context: {
        slug: pizza.slug.current,
      },
    });
  });
}
async function turnToppingsIntoPages({ graphql, actions }) {
  console.log('turnign the toppings into pages');
  // 1. get the template
  const toppingTemplate = path.resolve('./src/pages/pizzas.js');
  // 2. query all the toppings
  const { data } = await graphql(`
    query {
      toppings: allSanityTopping {
        nodes {
          name
          id
        }
      }
    }
  `);
  _637‍.g.console.log(data);
  // 3. createPag for that topping
  data.toppings.nodes.forEach((topping) => {
    _637‍.g.console.log(`creating page for topping`, topping.name);
    actions.createPage({
      path: `topping/${topping.name}`,
      component: toppingTemplate,
      context: {
        // TODO Regex for topping
        toppingRegex: `/${topping.name}/i`,
      },
    });
  });
  // 4. pass topping data to pizzas.js
}

       async function createPages(params) {
  // Create pages dybamically
  // wait for all promises to be resolved before finishing this function
  await Promise.all([
    turnPizzasIntoPages(params),
    turnToppingsIntoPages(params),
  ]);
  // 1. Pizzas
  // 2. Toppings
  // 3. Slicemasters
}
